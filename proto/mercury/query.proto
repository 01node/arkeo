syntax = "proto3";
package mercury.mercury;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "mercury/params.proto";
import "mercury/keeper.proto";
// this line is used by starport scaffolding # 1

option go_package = "mercury/x/mercury/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mercury/mercury/params";
  }
  rpc FetchProvider(QueryFetchProviderRequest) returns (QueryFetchProviderResponse) {
    option (google.api.http).get = "/mercury/mercury/provider/{pubkey}/{chain}";
  }
      rpc ProviderAll(QueryAllProviderRequest) returns (QueryAllProviderResponse) {
        option (google.api.http).get = "/mercury/mercury/providers";
    }

  rpc FetchContract(QueryFetchContractRequest) returns (QueryFetchContractResponse) {
    option (google.api.http).get = "/mercury/mercury/contract/{pubkey}/{chain}/{client}";
  }
      rpc ContractAll(QueryAllContractRequest) returns (QueryAllContractResponse) {
        option (google.api.http).get = "/mercury/mercury/contracts";
    }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryFetchProviderRequest {
      string pubkey = 1;
      string chain = 2;
}

message QueryFetchProviderResponse {
    Provider provider = 1 [(gogoproto.nullable) = false];
}

message QueryAllProviderRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProviderResponse {
    repeated Provider provider = 1 [(gogoproto.nullable) = false];
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFetchContractRequest {
      string pubkey = 1;
      string chain = 2;
      string client = 3;
}

message QueryFetchContractResponse {
    Contract contract = 1 [(gogoproto.nullable) = false];
}

message QueryAllContractRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllContractResponse {
    repeated Contract contract = 1 [(gogoproto.nullable) = false];
    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// this line is used by starport scaffolding # 3
