syntax = "proto3";
package mercury.mercury;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "mercury/x/mercury/types";

// Msg defines the Msg service.
service Msg {
      rpc RegisterProvider(MsgRegisterProvider) returns (MsgRegisterProviderResponse);
  rpc BondProvider(MsgBondProvider) returns (MsgBondProviderResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgRegisterProvider {
  string creator = 1;
  string pubkey = 2 [(gogoproto.casttype) = "mercury/common.PubKey"];
  string chain = 3 [(gogoproto.casttype) = "mercury/common.Chain"];
}

message MsgRegisterProviderResponse {
}

message MsgBondProvider {
  string creator = 1;
  string pubkey = 2 [(gogoproto.casttype) = "mercury/common.PubKey"];
  string chain = 3 [(gogoproto.casttype) = "mercury/common.Chain"];
  string bond = 4 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

message MsgBondProviderResponse {
}

// this line is used by starport scaffolding # proto/tx/message
