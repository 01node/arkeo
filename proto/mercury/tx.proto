syntax = "proto3";
package mercury.mercury;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "mercury/keeper.proto";

option go_package = "mercury/x/mercury/types";

// Msg defines the Msg service.
service Msg {
  rpc BondProvider(MsgBondProvider) returns (MsgBondProviderResponse);
  rpc ModProvider(MsgModProvider) returns (MsgModProviderResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgBondProvider {
  string creator = 1;
  string pub_key = 2 [(gogoproto.casttype) = "mercury/common.PubKey"];
  string chain = 3 [(gogoproto.casttype) = "mercury/common.Chain"];
  string bond = 4 [(cosmos_proto.scalar) = "cosmos.Int", (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

message MsgBondProviderResponse {}

message MsgModProvider {
  string creator = 1;
  string pub_key = 2 [(gogoproto.casttype) = "mercury/common.PubKey"];
  string chain = 3 [(gogoproto.casttype) = "mercury/common.Chain"];
  string metadataURI = 4;
  uint64 metadataNonce = 5;
  ProviderStatus status = 6;
  uint64 minContractDuration = 7;
  uint64 maxContractDuration = 8;
  int64 subscriptionRate = 9;
  int64 payAsYouGoRate = 10;
}

message MsgModProviderResponse {}

// this line is used by starport scaffolding # proto/tx/message
